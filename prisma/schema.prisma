generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  username       String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  avatarUrl      String?
  firstName      String?
  lastName       String?
  role           UserRole         @default(USER)
  authMethods    AuthMethod[]
  LessonProgress LessonProgress[]
}

model AuthMethod {
  id             String         @id @default(cuid())
  userId         String
  type           AuthMethodType
  identifier     String
  credential     String?
  refreshToken   String?
  isVerified     Boolean        @default(false)
  lastUsedAt     DateTime?
  failedAttempts Int            @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens         Token[]

  @@unique([userId, type, identifier])
}

model Token {
  id           String     @id @default(cuid())
  token        String     @unique
  createdAt    DateTime   @default(now())
  expiresAt    DateTime
  revoked      Boolean    @default(false)
  authMethodId String
  authMethod   AuthMethod @relation(fields: [authMethodId], references: [id], onDelete: Cascade)
}

enum AuthMethodType {
  LOCAL
  GOOGLE
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// Sign model
model SignCategory {
  id    String @id @default(cuid())
  name  String @unique
  signs Sign[]
}

model Sign {
  id         String   @id @default(cuid())
  word       String
  definition String?
  mediaUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  categoryId String?
  category   SignCategory? @relation(fields: [categoryId], references: [id])
  exercise   Exercise[]
}

// Lesson model
enum LessonLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?
  level       LessonLevel @default(BEGINNER)
  isPublished Boolean     @default(false) // used to test the lesson before publishing it
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt

  // relations
  exercises Exercise[]
}

model Exercise {
  id       String  @id @default(cuid())
  lessonId String
  prompt   String // text or instruction of the exercise
  signId   String? // sign expected or targeted by the exercise

  // relations
  lesson Lesson @relation(fields: [lessonId], references: [id])
  sign   Sign?  @relation(fields: [signId], references: [id])
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  currentStep Int      @default(0) // number of the current step
  score       Int? // total score (optionnal)
  updatedAt   DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
}
